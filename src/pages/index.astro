---
import Layout from '../layouts/Layout.astro';
---

<Layout>
	<main class="container">
		<header>
			<h1>🎲 数制编码魔方</h1>
			<p>Number System & Coding Cube - 计算机组成原理可视化学习工具</p>
		</header>

		<div class="tools-grid">
			<!-- 实时多进制转换器 -->
			<section class="converter-section">
				<h2>🔄 实时多进制转换器</h2>
				<div class="input-group">
					<label for="input-number">输入数值:</label>
					<input 
						type="text" 
						id="input-number" 
						placeholder="请输入数值" 
						autocomplete="off"
					>
					<select id="input-base">
						<option value="2">二进制 (Binary)</option>
						<option value="8">八进制 (Octal)</option>
						<option value="10" selected>十进制 (Decimal)</option>
						<option value="16">十六进制 (Hexadecimal)</option>
					</select>
				</div>
				
				<div class="conversion-results">
					<div class="result-item">
						<label>二进制 (Binary):</label>
						<span id="result-binary" class="result-value">-</span>
					</div>
					<div class="result-item">
						<label>八进制 (Octal):</label>
						<span id="result-octal" class="result-value">-</span>
					</div>
					<div class="result-item">
						<label>十进制 (Decimal):</label>
						<span id="result-decimal" class="result-value">-</span>
					</div>
					<div class="result-item">
						<label>十六进制 (Hexadecimal):</label>
						<span id="result-hexadecimal" class="result-value">-</span>
					</div>
				</div>
			</section>

			<!-- 机器码编码解析器 -->
			<section class="encoder-section">
				<h2>🔧 机器码编码解析器</h2>
				<div class="input-group">
					<label for="decimal-input">十进制整数:</label>
					<input 
						type="number" 
						id="decimal-input" 
						placeholder="输入正数或负数" 
						autocomplete="off"
					>
					<select id="bit-width">
						<option value="8">8位</option>
						<option value="16" selected>16位</option>
						<option value="32">32位</option>
					</select>
				</div>

				<div class="encoding-results">
					<div class="encoding-item">
						<h3>原码 (Sign-Magnitude)</h3>
						<div class="binary-display" id="sign-magnitude">-</div>
						<div class="explanation" id="sm-explanation"></div>
					</div>
					<div class="encoding-item">
						<h3>反码 (One's Complement)</h3>
						<div class="binary-display" id="ones-complement">-</div>
						<div class="explanation" id="oc-explanation"></div>
					</div>
					<div class="encoding-item">
						<h3>补码 (Two's Complement)</h3>
						<div class="binary-display" id="twos-complement">-</div>
						<div class="explanation" id="tc-explanation"></div>
					</div>
				</div>
			</section>
		</div>
	</main>
</Layout>

<style>
	/* 导入字体 */
	@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap');

	/* CSS变量定义主题 */
	:root {
		--primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		--secondary-gradient: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
		--success-gradient: linear-gradient(135deg, #13B0A5 0%, #069B7D 100%);
		--warning-gradient: linear-gradient(135deg, #FA8231 0%, #FFD14C 100%);
		--background: #f0f2f5;
		--card-bg: rgba(255, 255, 255, 0.95);
		--text-primary: #1a202c;
		--text-secondary: #4a5568;
		--border-color: rgba(226, 232, 240, 0.8);
		--shadow-sm: 0 2px 4px rgba(0, 0, 0, 0.05);
		--shadow-md: 0 4px 6px -1px rgba(0, 0, 0, 0.07), 0 2px 4px -1px rgba(0, 0, 0, 0.03);
		--shadow-lg: 0 10px 15px -3px rgba(0, 0, 0, 0.08), 0 4px 6px -2px rgba(0, 0, 0, 0.02);
		--shadow-xl: 0 20px 25px -5px rgba(0, 0, 0, 0.08), 0 10px 10px -5px rgba(0, 0, 0, 0.02);
	}

	/* 深色模式 */
	@media (prefers-color-scheme: dark) {
		:root {
			--background: #0f1419;
			--card-bg: rgba(30, 35, 42, 0.95);
			--text-primary: #e2e8f0;
			--text-secondary: #a0aec0;
			--border-color: rgba(45, 55, 72, 0.8);
		}
	}

	body {
		background: var(--background);
		background-image: 
			radial-gradient(circle at 20% 50%, rgba(102, 126, 234, 0.1) 0%, transparent 50%),
			radial-gradient(circle at 80% 80%, rgba(118, 75, 162, 0.1) 0%, transparent 50%),
			radial-gradient(circle at 40% 20%, rgba(245, 87, 108, 0.05) 0%, transparent 50%);
		min-height: 100vh;
	}

	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem;
		font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		animation: fadeIn 0.6s ease-out;
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	header {
		text-align: center;
		margin-bottom: 3rem;
		position: relative;
	}

	header h1 {
		font-size: 3rem;
		font-weight: 800;
		background: var(--primary-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		margin-bottom: 0.5rem;
		letter-spacing: -0.02em;
		animation: slideDown 0.8s ease-out;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-30px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	header p {
		color: var(--text-secondary);
		font-size: 1.125rem;
		font-weight: 500;
		animation: fadeIn 1s ease-out 0.3s both;
	}

	.tools-grid {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 2rem;
		animation: fadeIn 0.8s ease-out 0.4s both;
	}

	@media (max-width: 768px) {
		.tools-grid {
			grid-template-columns: 1fr;
		}
		
		header h1 {
			font-size: 2rem;
		}
	}

	section {
		background: var(--card-bg);
		border-radius: 20px;
		padding: 2.5rem;
		box-shadow: var(--shadow-xl);
		border: 1px solid var(--border-color);
		backdrop-filter: blur(10px);
		transition: transform 0.3s ease, box-shadow 0.3s ease;
		position: relative;
		overflow: hidden;
	}

	section::before {
		content: '';
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		height: 4px;
		background: var(--primary-gradient);
	}

	section:hover {
		transform: translateY(-4px);
		box-shadow: 0 25px 30px -10px rgba(0, 0, 0, 0.1);
	}

	.encoder-section::before {
		background: var(--secondary-gradient);
	}

	section h2 {
		color: var(--text-primary);
		margin-bottom: 2rem;
		font-size: 1.625rem;
		font-weight: 700;
		display: flex;
		align-items: center;
		gap: 0.75rem;
	}

	.input-group {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
		margin-bottom: 2rem;
	}

	.input-group label {
		font-weight: 600;
		color: var(--text-primary);
		font-size: 0.875rem;
		text-transform: uppercase;
		letter-spacing: 0.05em;
		margin-bottom: 0.25rem;
	}

	.input-group input,
	.input-group select {
		padding: 0.875rem 1rem;
		border: 2px solid var(--border-color);
		border-radius: 12px;
		font-size: 1rem;
		font-weight: 500;
		background: var(--card-bg);
		color: var(--text-primary);
		transition: all 0.3s ease;
		box-shadow: var(--shadow-sm);
	}

	.input-group input:hover,
	.input-group select:hover {
		border-color: #667eea;
		box-shadow: var(--shadow-md);
	}

	.input-group input:focus,
	.input-group select:focus {
		outline: none;
		border-color: #667eea;
		box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
		transform: translateY(-1px);
	}

	.conversion-results,
	.encoding-results {
		display: flex;
		flex-direction: column;
		gap: 1.25rem;
	}

	.result-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 1.25rem;
		background: linear-gradient(135deg, rgba(102, 126, 234, 0.05) 0%, rgba(118, 75, 162, 0.05) 100%);
		border-radius: 12px;
		border: 1px solid rgba(102, 126, 234, 0.2);
		position: relative;
		transition: all 0.3s ease;
		overflow: hidden;
	}

	.result-item::before {
		content: '';
		position: absolute;
		left: 0;
		top: 0;
		bottom: 0;
		width: 4px;
		background: var(--primary-gradient);
	}

	.result-item:hover {
		transform: translateX(4px);
		box-shadow: var(--shadow-md);
		background: linear-gradient(135deg, rgba(102, 126, 234, 0.08) 0%, rgba(118, 75, 162, 0.08) 100%);
	}

	.result-item:nth-child(2)::before {
		background: var(--success-gradient);
	}

	.result-item:nth-child(3)::before {
		background: var(--warning-gradient);
	}

	.result-item:nth-child(4)::before {
		background: var(--secondary-gradient);
	}

	.result-item label {
		font-weight: 600;
		color: var(--text-primary);
		font-size: 0.9rem;
		letter-spacing: 0.025em;
	}

	.result-value {
		font-family: 'JetBrains Mono', 'Courier New', monospace;
		font-weight: 600;
		color: #667eea;
		background: linear-gradient(135deg, rgba(255, 255, 255, 0.9) 0%, rgba(249, 250, 251, 0.9) 100%);
		padding: 0.625rem 1rem;
		border-radius: 8px;
		border: 1px solid rgba(102, 126, 234, 0.2);
		min-width: 140px;
		text-align: center;
		letter-spacing: 0.05em;
		box-shadow: var(--shadow-sm);
		transition: all 0.3s ease;
	}

	.result-value:hover {
		transform: scale(1.05);
		box-shadow: var(--shadow-md);
	}

	.encoding-item {
		background: linear-gradient(135deg, rgba(240, 93, 155, 0.05) 0%, rgba(245, 87, 108, 0.05) 100%);
		padding: 1.75rem;
		border-radius: 12px;
		border: 1px solid rgba(240, 93, 155, 0.2);
		position: relative;
		transition: all 0.3s ease;
	}

	.encoding-item::before {
		content: '';
		position: absolute;
		left: 0;
		top: 0;
		bottom: 0;
		width: 4px;
		background: var(--secondary-gradient);
	}

	.encoding-item:hover {
		transform: translateY(-2px);
		box-shadow: var(--shadow-lg);
		background: linear-gradient(135deg, rgba(240, 93, 155, 0.08) 0%, rgba(245, 87, 108, 0.08) 100%);
	}

	.encoding-item:nth-child(2)::before {
		background: var(--warning-gradient);
	}

	.encoding-item:nth-child(3)::before {
		background: var(--success-gradient);
	}

	.encoding-item h3 {
		margin: 0 0 1.25rem 0;
		color: var(--text-primary);
		font-size: 1.125rem;
		font-weight: 700;
		letter-spacing: -0.01em;
	}

	.binary-display {
		font-family: 'JetBrains Mono', 'Courier New', monospace;
		font-size: 1.25rem;
		font-weight: 700;
		background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		padding: 1.25rem;
		background-color: white;
		border-radius: 10px;
		border: 2px solid rgba(240, 93, 155, 0.2);
		text-align: center;
		letter-spacing: 0.15em;
		word-break: break-all;
		margin-bottom: 0.75rem;
		box-shadow: var(--shadow-sm);
		transition: all 0.3s ease;
		position: relative;
	}

	.binary-display::before {
		content: '';
		position: absolute;
		inset: 0;
		background: white;
		border-radius: 10px;
		z-index: -1;
	}

	.binary-display:hover {
		transform: scale(1.02);
		box-shadow: var(--shadow-md);
	}

	.explanation {
		font-size: 0.875rem;
		color: var(--text-secondary);
		padding: 0.75rem;
		background: rgba(102, 126, 234, 0.05);
		border-radius: 8px;
		border: 1px solid rgba(102, 126, 234, 0.1);
		margin-top: 0.5rem;
		transition: all 0.3s ease;
	}

	.explanation:hover {
		background: rgba(102, 126, 234, 0.08);
	}

	.error {
		color: #ef4444 !important;
		background: linear-gradient(135deg, #fef2f2 0%, #fee2e2 100%) !important;
		border-color: rgba(239, 68, 68, 0.3) !important;
		animation: shake 0.5s ease-in-out;
	}

	@keyframes shake {
		0%, 100% { transform: translateX(0); }
		10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }
		20%, 40%, 60%, 80% { transform: translateX(2px); }
	}
</style>

<script>
	// 实时多进制转换器
	class NumberBaseConverter {
		constructor() {
			this.inputNumber = document.getElementById('input-number');
			this.inputBase = document.getElementById('input-base');
			this.resultBinary = document.getElementById('result-binary');
			this.resultOctal = document.getElementById('result-octal');
			this.resultDecimal = document.getElementById('result-decimal');
			this.resultHexadecimal = document.getElementById('result-hexadecimal');

			this.bindEvents();
		}

		bindEvents() {
			this.inputNumber.addEventListener('input', () => this.convert());
			this.inputBase.addEventListener('change', () => this.convert());
		}

		convert() {
			const input = this.inputNumber.value.trim();
			const base = parseInt(this.inputBase.value);

			if (!input) {
				this.clearResults();
				return;
			}

			try {
				// 验证输入是否符合选定的进制
				if (!this.isValidForBase(input, base)) {
					throw new Error('输入不符合选定进制');
				}

				// 转换为十进制
				const decimal = parseInt(input, base);
				
				if (isNaN(decimal)) {
					throw new Error('无效输入');
				}

				// 更新各进制结果
				this.resultBinary.textContent = decimal.toString(2);
				this.resultOctal.textContent = decimal.toString(8);
				this.resultDecimal.textContent = decimal.toString(10);
				this.resultHexadecimal.textContent = decimal.toString(16).toUpperCase();

				// 清除错误状态
				this.clearErrorState();

			} catch (error) {
				this.showError();
			}
		}

		isValidForBase(input, base) {
			const validChars = '0123456789ABCDEF'.slice(0, base);
			return input.toUpperCase().split('').every(char => validChars.includes(char));
		}

		clearResults() {
			this.resultBinary.textContent = '-';
			this.resultOctal.textContent = '-';
			this.resultDecimal.textContent = '-';
			this.resultHexadecimal.textContent = '-';
			this.clearErrorState();
		}

		showError() {
			[this.resultBinary, this.resultOctal, this.resultDecimal, this.resultHexadecimal]
				.forEach(el => {
					el.textContent = '错误';
					el.classList.add('error');
				});
		}

		clearErrorState() {
			[this.resultBinary, this.resultOctal, this.resultDecimal, this.resultHexadecimal]
				.forEach(el => el.classList.remove('error'));
		}
	}

	// 机器码编码解析器
	class MachineCodeEncoder {
		constructor() {
			this.decimalInput = document.getElementById('decimal-input');
			this.bitWidth = document.getElementById('bit-width');
			this.signMagnitude = document.getElementById('sign-magnitude');
			this.onesComplement = document.getElementById('ones-complement');
			this.twosComplement = document.getElementById('twos-complement');
			this.smExplanation = document.getElementById('sm-explanation');
			this.ocExplanation = document.getElementById('oc-explanation');
			this.tcExplanation = document.getElementById('tc-explanation');

			this.bindEvents();
		}

		bindEvents() {
			this.decimalInput.addEventListener('input', () => this.encode());
			this.bitWidth.addEventListener('change', () => this.encode());
		}

		encode() {
			const input = this.decimalInput.value.trim();
			const bits = parseInt(this.bitWidth.value);

			if (!input) {
				this.clearResults();
				return;
			}

			try {
				const decimal = parseInt(input);
				
				if (isNaN(decimal)) {
					throw new Error('无效输入');
				}

				// 检查数值范围
				const maxValue = Math.pow(2, bits - 1) - 1;
				const minValue = -Math.pow(2, bits - 1);

				if (decimal > maxValue || decimal < minValue) {
					throw new Error(`超出${bits}位范围: [${minValue}, ${maxValue}]`);
				}

				// 计算各种编码
				const encodings = this.calculateEncodings(decimal, bits);

				// 更新显示
				this.signMagnitude.textContent = encodings.signMagnitude;
				this.onesComplement.textContent = encodings.onesComplement;
				this.twosComplement.textContent = encodings.twosComplement;

				// 更新解释
				this.updateExplanations(decimal, bits, encodings);

				// 清除错误状态
				this.clearErrorState();

			} catch (error) {
				this.showError(error.message);
			}
		}

		calculateEncodings(decimal, bits) {
			const isNegative = decimal < 0;
			const absValue = Math.abs(decimal);

			// 原码
			let signMagnitude = absValue.toString(2).padStart(bits - 1, '0');
			signMagnitude = (isNegative ? '1' : '0') + signMagnitude;

			// 反码
			let onesComplement;
			if (isNegative) {
				// 负数的反码：符号位为1，其余位取反
				onesComplement = '1' + absValue.toString(2).padStart(bits - 1, '0')
					.split('').map(bit => bit === '0' ? '1' : '0').join('');
			} else {
				// 正数的反码等于原码
				onesComplement = signMagnitude;
			}

			// 补码
			let twosComplement;
			if (isNegative) {
				// 负数的补码：反码加1
				let carry = 1;
				twosComplement = onesComplement.split('').reverse().map(bit => {
					if (carry === 0) return bit;
					if (bit === '0') {
						carry = 0;
						return '1';
					} else {
						return '0';
					}
				}).reverse().join('');
			} else {
				// 正数的补码等于原码
				twosComplement = signMagnitude;
			}

			return {
				signMagnitude: this.formatBinary(signMagnitude),
				onesComplement: this.formatBinary(onesComplement),
				twosComplement: this.formatBinary(twosComplement)
			};
		}

		formatBinary(binary) {
			// 每4位添加一个空格，便于阅读
			return binary.replace(/(.{4})/g, '$1 ').trim();
		}

		updateExplanations(decimal, bits, encodings) {
			const isNegative = decimal < 0;
			const absValue = Math.abs(decimal);

			if (isNegative) {
				this.smExplanation.textContent = `负数 ${decimal}：符号位=1，数值部分=${absValue.toString(2)}`;
				this.ocExplanation.textContent = `负数的反码：符号位=1，数值部分各位取反`;
				this.tcExplanation.textContent = `负数的补码：反码 + 1`;
			} else {
				this.smExplanation.textContent = `正数 ${decimal}：符号位=0，数值部分=${absValue.toString(2)}`;
				this.ocExplanation.textContent = `正数的反码等于原码`;
				this.tcExplanation.textContent = `正数的补码等于原码`;
			}
		}

		clearResults() {
			this.signMagnitude.textContent = '-';
			this.onesComplement.textContent = '-';
			this.twosComplement.textContent = '-';
			this.smExplanation.textContent = '';
			this.ocExplanation.textContent = '';
			this.tcExplanation.textContent = '';
			this.clearErrorState();
		}

		showError(message) {
			[this.signMagnitude, this.onesComplement, this.twosComplement]
				.forEach(el => {
					el.textContent = '错误: ' + message;
					el.classList.add('error');
				});
		}

		clearErrorState() {
			[this.signMagnitude, this.onesComplement, this.twosComplement]
				.forEach(el => el.classList.remove('error'));
		}
	}

	// 初始化
	document.addEventListener('DOMContentLoaded', () => {
		new NumberBaseConverter();
		new MachineCodeEncoder();
	});
</script>
